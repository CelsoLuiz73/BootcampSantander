Lógica de Programação Essencial - Denilson Bonatti


1 - Criar algoritmo do seu dia (deste que vc acordou até a hora que vc foi dormir)
2 - Resolva todos os problemas em menos de uma hora(https://studio.code.org/s/mc/lessons/1/levels/1)
3 - Vc vai resolver o problema e vai escrever um pseudocógido e indicar para alguém como ela vai
resolver este problema (https://rachacuca.com.br/jogos/pinguins-numa-fria/)

Parei em - aprendendo fluxograma, variáveis e constantes

3 - @digitalinnovation.one
4 - @denilsonbonatti

====

10jun2022

Exercício:

Além de receber as 4 notas, vai exibir o total do cálculo das notas (nota1, nota3...) - OK
Parei em tomadas de decisões e expressões

11jun2022

Expressões Aritméticos (2 + 2 = 4);
Expressôes Literais (nome = "José")
Operadores relacionais (Verdadeiro/Falso) (5 > 1 = Verdadeiro)
Tomadas de Decisão (Vc tem cartão de crédito?(sim/não)(se sim -> digitar o número do cartão)(se não -> não fazemos vendas sem cartão de crédito)

Ex:
Declarar 4 variáveis (jan,fev,mar,abr); variável média aritmética dos meses, 
Nessas variáveis declara quanto o vendedor vendeu por mês;
se a média for maior que 5mil, (parabéns vc vai receber um abono de 10%)
se a média for menor que 5mil, (vc receberá um abono de 3%)

Parei em estrutura de repetição

12jun2022

Estrutura de repetição

Estrutura de repetição junto com a tomada de decisão são 70% da programação

13jun2022

...continua estrutura de repetição

Ex: na estrutura fazer a tabuada do 9

14jun2022

parei em trabalhando com laços de repetição em Portugol

16jun2022

contador ++ é igual (contador=contador+1)

rever aula - aplicação prática com matrizes e vetores

---

Desenvolviemnto Android

Desenvolvimento Híbrido: Uma linguagem está alinhada a um Framework:
Flutter / Dart
React Native / JavaScript
summery / C#

Kotlin Foundation (JetBrains / Google)

KMM - Kotlin Mobile Multiplataform

smart casts - conversão

null safty - só tem null pointer exception qdo vc quer.

API'S específicas do AndroidX Kotlin (KTX, corrotinas etc) N/A (Java);
Projetos de várias platafromas; N/A
Jetpack Compose; N/A

Constantes que permite que a gente acesse o valor máximo que um tipo de dado pode receber:
println(Int.MAX_VALUE)
println(Float.MAX_VALUE)
println()(Long.MAX_VALUE)
println(Byte.MAX_VALUE)
println(Short.MAX_VALUE)

Converter tipos de dados:
toByte()
toShort()
toInt()
toLong()
toFloat()
toDouble()
toChar()

Palavras reservadas Kotlin:
var - mutável
val - imutável (similar ao final em Java)
Const Val - imutável (SNAKE-CASE): Constante cujo valor é atribuído durante compilação. Declarada dentro de um companion object.
dentro da função Main, tem que ser um val, se está fora, Const Val pode ser acessado de qualquer ponto do código.

var currentAge = 22
OBS: Neste caso, atribuímos um valor para váriavel, mas não definimos o tipo. O Kotlin entende que o tipo é um inteiro "Int").

var currentAge:Int?
currentAge = null ou 22
OBS: Neste caso, atribuímos um tipo para a variável, que pode receber um inteiro "Int" ou receber um nulo "null". Qdo colocamos uma
    "?" informamos que a variável pode receber um valor nulo)
OBS2: Qdo a variável for "var" ela poderá sofrer alteração;
OBS3: Valor definido e alterado durante a execução.

val currentAge = 22
val currentAge:Int?
currentAge = null ou 22
- Qdo a variável for "val" ela não poderá sofrer alteração;
- Valor definido durante a execução.

const val MIN_AGE = 16
const val MAX_AGE = 68
- Valor somente para consulta;
- Qdo a variável for "const val" utiliza o padrão SNAKE_CASE e seu valor não sofrerá alteração;
- Valor definido qdo da compilação (processo de build - construído).

Operadores Aritméticos

função		Expressão	Comando		Atribuição
soma		a + b		a.plus(b)	a+=b
subtração	a - b		a.minus(b)	a-=b
multiplicação	a * b		a.times(b)	a*=b
divisão		a / b		a.div(b)	a/=b
resto		a % b		a.mod(b)	a%=b

Operadores Comparativos

função			Expressão	Comando
maior/menor ou		a>b ou a<b	a.compareTo(b)>0 ou a.compareTo(b)<0
maior/menor igual	a>=b ou a<=b	a.compareTo(b)>=0 ou a.compareTo(b)<=0
igual			a==b		a.equals(b)
diferente		a!=b		!(a.equals(b))

* - Os comandos compareTo retornan os valores -1(menor que), 0(igual) ou 1(maior).
* - Já os operadores retornam valores booleanos;
* - O comando equals retorna um booleano.

PAREI EMOPERADORES LÓGICOS E OPERADORES In E RANGE

======

18jun2022

-Função ou Expressão que conté In, !In (com a "!", inverte a comparação), Range

val numbers = listOf(3,9,0,1,2)
print(12 in numbers)
// false

print(12 in 0..20)
// true

Exemplo:

fun main() {
    val bingo = listOf(8,6,34,2,13)
    val number = (1..34).random()
    println(number)
    println(number in bingo)
}

---
/**
 const val tem que ser declarada, sempre antes da função MAIN.
 */

const val MIN_AGE = 16
const val MAX_AGE = 68

fun main() {
    val age = (10..100).random()
    println(age)
    println(age in MIN_AGE..MAX_AGE)
    println(age >= MIN_AGE && age <= MAX_AGE)
}

---

String possui muitos métodos associados: Indexão, Concatenação, Comparação, Formatação

Indexação

- String como array;
- First(), Last(), String.length, String[index];

First ou [0] - vai pegar a primeira posição do array (1ª posição é sempre = 0)
Last - vai pegar a última posição do array.
length - -1...(uma range de 20 posições, ele vai de 0 até 19. A última posição é (20-1=19).

Concatenação

Para concatenar uma variável a uma String, os símbolos ${} devem ser inseridos.

Exemplo:

fun main() {
    val welcome = "Bem vinda(o)"
    var name = "luisa"
    println("$welcome, ${name.capitalize()}!")
}

Capitalização de Strings:
capitalize(), toUpperCase(), toLowerCase(), decapitalize()

Remoção de Espaços:
trimEnd(), trimStart(), trim()

Substituição de Caracteres:
replace(x,y)

Formatação
"padrão ${valor}".format(valor)

---

Empty (String cujo tamanho é "0") x Blank (métodos de comparação)

- Se o tamanho da String (s.legth) for 0 está empty e blank;
- Se o tamanho for > 0, mas todos os caracteres são espaços em branco, está blank mas não empty.

Exemplo:

fun main() {
    val empty = ""
    println(empty.length)
    
    val blank = "     "
    println(blank.length)
    
    println(empty.isEmpty() && empty.isBlank())
    println(blank.isEmpty() && blank.isBlank())
    println(blank.isEmpty() || blank.isBlank())
}

---

Funções

- Prefixo fun nomeDaFunção(nome:Tipo):TipoRetorno{}
- Funções anônimas, single-line, inline, extensões, Lambdas, ordem supeior
- Documentação do kotlin, Code Labs do Google e aprofundar este conhecimento

Exemplo: (Simplificando uma função)

private fun getFullName(name:String, lastName:String):String{
	val fullName = "$name $lastName"
	return fullname
}

private fun getFullName(name:String, lastName:String):String{
	return "$name $lastName"
}

private fun getFullName(name:String, lastName:String) = "$name $lastName"

---

Funções de Ordem Superior

- Recebem outra função ou lambda por parâmetro;
- Bastante úteis para a generalização de funções e tratamento de erros.

ASSITIR NOVAMENTE: FUNÇÕES DE ORDEM SUPERIOR.

------
19jun2022

fun main() {
    
    val y = calcularNovo(12,4){a,b -> a*b }
    println("O valor calculado é: $y")
}

//Esse ou:
//fun calcularNovo (n1:Int, n2:Int, calcular:(Int,Int)->Int):Int{
    //val resultado = calcular(n1,n2)
    //return resultado
//}

//Esse
fun calcularNovo (n1:Int, n2:Int, calcular:(Int,Int)->Int)= calcular(n1,n2)

---

Atribuição - When

fun main() {
    
    val grade = (0..10).random()
    println(grade.getStudentStatus())
}

fun Int.getStudentStatus():String {
    println("nota $this")
    
    return when(this){
        in 0..4 -> "Reprovado"
        in 5..7 -> "Mediana"
        in 8..9 -> "Bom"
        10 -> "Execelente"
        else -> "Indefinido"
    }
}

Atribuição - Elvis Operator

fun main() {
    
var t:Int
var x:Int? = null
var w:Int? = 5
t = x?:w?:-1

println(t)

}

---

fun main() {
    
var t:Int = 30
var w:Int? = null
var t:String? = x!!.getStudentStatus()

println(t)

}

-----

fun main() {
    
    var x:Int = 30
	var w:Int? = null
	var t:String? = x!!.getStudentStatus()

	println(t)

}

fun Int.getStudentStatus():String {
    println("nota $this")
    
    return when(this){
        in 0..4 -> "Reprovado"
        in 5..7 -> "Mediana"
        in 8..9 -> "Bom"
        10 -> "Execelente"
        else -> "Indefinido"
    }
}

----
20jun2022

class Carro() {

	var velocidade = 0
	var cambio = 0

	constructor(
		cor: String,
		ano: Int,
		marca: String
	): this()

	// Funções / Métodos
	fun acelera(vel: Int = 10) {
		this.velocidade = this.velocidade + vel
	}

	fun freia(vel: Int = 10) {
		this.velocidade -= vel
	}

	fun trocaMarcha(marcha: Int) {
		cambio = marcha
	}
}

fun main() {
	val car0 = Carro()
	val car1 = Carro(ano = 2000, marca = "Ford", cor = "blue")
	val car2 = Carro("2000", 3000, marca = "Volks")
	val car3 = Carro(cor = "green", 4000, "Toyota")

	car3.acelera()
	car0.freia()
	car1.trocaMarcha()
}

===============

22jun2022

Curso de Kotlin Básico - Douglas Mota

Possuir conhecimento sore o gerenciamento, dependencias

estrutura básica de uma função:

fun max(a: Int, b: Int): Int {
	return if (a > b) a else b
}

- diferença entre parâmetros para argumentos 
- parâmetros é qdo vc define uma função, então vc tem uma lista de parâmetros uma declaração dos parâmetros
- assinatura de uma função é a combinação do nome, da lista de parâmetros e do tipo de retorno
- argumentos e qdo vc chama essa função já pronta e passa para esta função os seus argumentos, ou seja, neste
  caso, os argumentos que vc vai passar para esta função o argumento A e argumento B os dois são do tipo inteiro
- tipo de retorno sempre vem depois da declaração de parâmetros
- corpo da função trecho de código dentro das chaves
- expressão vs declaração: if no kotlin é uma expressão e não uma declaração (expressão temvalor próprio) uma expressão tem valor,
  então podemos usar o return diretamente no meu if porque minha função já vai entender que retornar o resultado desta expressão.
  a maioria das estruturas de controle são expressões
  exceto os loops(for, do, do/while) - elas não são expressões então vc não pode usar o return junto com essas palavras chaves.
- corpo de bloco vs corpo de expressão:
  corpo de bloco é qdo uma função é escrita com seu corpo dentro de chaves {}. Tipo de retorno é obrigatório e declaração return
  é obrigatório
- corpo de expressão é qdo a função consiste de apenas uma expressão (valor)

====

fun main() {
    println(max1(10, 5))
}

// Corpo de bloco
fun max(a: Int, b: Int): Int {
    return if (a > b) a else b 
}

//corpo de expressão
fun max1(a: Int, b: Int): Int = if (a > b) a else b

//corpo de expressão sem informar o tipo de retorno
fun max1(a: Int, b: Int) = if (a > b) a else b

===
25jun2022

FUNDAMENTOS DE ORIENTAÇÃO A OBJETOS COM KOTLIN

- Apresentação do conteúso do curso
- Determinando o projeto prático
- Introdução a Orientação a objetos em Kotlin
- Classe pública e classe privada
- Entendendo sobre classes na prática e criando o projeto

programação procedural
programação orientada a objetos

package one.digitalInnovation.digionebank

class Pessoa {
    var nome: String = "Jether"
    var cpf: String = "123.123.123.11"

    fun somar(n1: Int, n2: Int) {
        val oi = (n1 + n2)
        println(oi)
    }
}


fun main() {
    val jether = Pessoa()
    println(jether.nome)
    println(jether.cpf)
    println("Meu nome é " + jether.nome + " e meu o meu CPF é " + jether.cpf)
    jether.somar(5, 10)

}

====

27jun2022 (começamos: O que são membros de uma classe)

inner class (classe interna)

Conceito de Data Class:
- Armazenar dados que uma vez inicializado, a gente não possa mudá-lo (Armazenar um estado daquele objeto e não mais modificá-lo);
- Criamos através daquela Data Class, objetos, onde teremos dados imutáveis) - Não modificar o estado do objeto;
- Data Class não pode ser abstrata (não pode ser: Inner , Open). Ela pode implementar interfaces;
- Todos os construtores primários, tem que ser inicializá-dos;
- O objeto pode ser copiado, permitindo a partir daquele ponto copiado;
- A partir de uma cópia, vc ininializa informações ou um estado novo;
- Mas o estado anterior, permanece em uma referência na memória;
- Ai vc passe a estar manipulando a cópia, ao longo de recursos e operações da nossa aplicação.

Utilizamos do recurso chamado argumentos nomeados: 

parei em: Introdução a Enum

====
28jun2022

Enum - A própria enum representa o objeto em si
companion object que nós dá a opção de criar funções estáticas, acessada via classe e não via instância do objeto
é uma classe que tem a opção de construtor primário, a sua propriedade e objetos interno daquela enum são instâncias do prórpio
tipo, dá própria classe que já declaram elas são dadas como singleton elas tem aquele único valor na se mexe é uma única instância

Abstrações - 





























====================
echo "# BootcampSantander" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M master
git remote add origin https://github.com/CelsoLuiz73/BootcampSantander.git
git push -u origin master

Santander Bootcamp Mobile Developer (Android/Kotlin)

=====

Solução GitHu

Erro -
this is my repository https://github.com/kiotie32/artbit-text.git when I do

$ git push -u origin master
remote: Repository not found.
fatal: repository 'https://github.com/kiotie32/arbit-text.git/' not found

solução:
I had the same problem but this command resolved it.

Replace:

git push -u origin master
with following command:

git push -u origin main
or

git push -f origin main


=====
Responsabilidades e atribuições

Coisas que você precisa fazer pra mandar muito bem aqui:
Participar de análises junto ao time, quanto as sugestões de melhorias dadas por fominhas, restaurantes, fomers e hunters;
Programar novas funcionalidades e ajustes solicitados pensando em desempenho e escalabilidade das aplicações já existentes;
Entregar software de qualidade, buscando boas práticas de desenvolvimento;
Proatividade para encontrar soluções alternativas/eficazes - e não só as saídas mais fáceis!
Estar sempre disposto a pesquisar e se atualizar sempre sobre novidades da área.
Requisitos e qualificações

Antes de qualquer coisa, você precisa ser MUITO gente boa e teamplayer!

Mas Também é Importante Que Tenha
Conhecimento no desenvolvimento de aplicativos nativos Android (Kotlin/Java);
Conhecimento no Android SDK (Android Components como: Lifecycle, Service, ContentProvider, Broadcast, etc);
Consumo de APIs REST;
Ferramentas de versionamento de código e desenvolvimento colaborativo;
Android Jetpack Components (ViewModel, Room, LiveData, Databinding, Navigation).
Será Um Diferencial
Conhecer e ter aplicado alguma arquitetura de software (MVVM, MVP, MVI, etc);
Conhecer Clean Architecture, princípios SOLID e padrões de projeto;
Conhecer UI customizada;
Conhecer testes unitários, de integração e instrumentados.
Informações adicionais

Porquê Você Vai Amar Trampar Aqui
Opção de trampo full remoto
Bônus por metas atingidas
Cupons mensais pra pedir no aiq
Descontos em cursos
App de saúde mental (terapia online)
Plano odontológico
Plano de saúde
Vale alimentação
Vale transporte
Seguro de vida
Dois monitores pra trabalho
Cafézin expresso e moído na hora
Uma cultura de autonomia e diversidade
Não temos nenhum dress code
E a chance de você crescer aqui dentro é imensa!
Deu match? Se inscreve aí <3